apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'signing'

android {
    signingConfigs {
        configDebug {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file('../../../MMC_keystore/debug.keystore')
            storePassword 'android'
        }

    }
    compileSdkVersion 22
    buildToolsVersion '22.0.1'
    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 22
        versionCode System.getenv("BUILD_NUMBER") as Integer ?: 0
        versionName "2.0.1." + System.getenv("BUILD_NUMBER") ?: "0"
        testApplicationId "org.restcomm.app.MMC.test"
        testInstrumentationRunner "pl.polidea.instrumentation.PolideaInstrumentationTestRunner"
        signingConfig signingConfigs.configDebug

        resValue "string", "app_versionCode", versionCode as String
        resValue "string", "app_versionName", versionName
        resValue "string", "svcmode_version", "103"

    }
    buildTypes {
        debug {
            resValue "string", "google_maps_api_key", "0kdHHzVVjg3MenrXSvZ2NpYta1j64_MF9bK17ag"
            resValue "string", "MMC_URL_LIN", "https://lb1.mymobilecoverage.com"
            resValue "string", "MMC_STATIC_ASSET_URL", "http://lb1.mymobilecoverage.com"
            resValue "string", "MMC_URL_SPEED", "http://sts.mymobilecoverage.com:5005"
            resValue "string", "app_versionCode", "0"
            resValue "string", "MMC_WEBSOCKET_URL", "wss://lb.mymobilecoverage.com:4444/ws"
            signingConfig signingConfigs.configDebug
            debuggable true
        }
        release {
            //minifyEnabled true
            //shrinkResources false
            //proguardFiles getDefaultProguardFile('proguard-android.txt')
            //proguardFiles 'proguard-android.txt'
            resValue "string", "google_maps_api_key", "0kdHHzVVjg3MenrXSvZ2NpYta1j64_MF9bK17ag"
            resValue "string", "MMC_URL_LIN", "https://lb1.mymobilecoverage.com"
            resValue "string", "MMC_STATIC_ASSET_URL", "http://lb1.mymobilecoverage.com"
            resValue "string", "MMC_URL_SPEED", "http://sts.mymobilecoverage.com:5005"
            resValue "string", "MMC_WEBSOCKET_URL", "wss://lb.mymobilecoverage.com:4444/ws"
            //signingConfig signingConfigs.configRelease
        }
    }

    //defaultPublishConfig 'release'
    //publishNonDefault true
    //productFlavors {
    //    library{

    //    }
    //}

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}

repositories {
    jcenter()
    maven {url "https://oss.sonatype.org/content/repositories/snapshots/"}
    //maven {url "http://nexus.mymobilecoverage.com:8081/nexus/content/repositories/releases"}
}
dependencies {
    compile 'com.android.support:appcompat-v7:22.2.0'

    compile 'org.restcomm:restcomm-android-qos-sdk-mmcextension:1.0.1-alpha-1-SNAPSHOT'
    //compile "com.restcomm.app:mmcextension:1.0.6"
    //compile project(':mmcextension')
}

// Upload Archives functionality
/*
ext {
    if (!project.hasProperty('nexusUrl')) {
        nexusUrl='http://nexus.mymobilecoverage.com:8081/nexus'
        nexusUsername = ''
        nexusPassword = ''
    }
}
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "${nexusUrl}/content/repositories/releases") {
                authentication(userName: nexusUsername, password: nexusPassword)
            }
            snapshotRepository(url: "${nexusUrl}/content/repositories/snapshots") {
                authentication(userName: nexusUsername, password: nexusPassword)
            }

        }
    }
}
*/

// Upload to sonatype stuff
gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        allprojects {
            // The rest of the signing properties are set in the global gradle.properties. Reason we keep this path here
            // is that the path needs to be absolute, but yet we want it to be functional both on local and Travis builds.
            // Since there doesn't seem to be a way to add conditional logic in properties files let's do it here
            if (project.hasProperty('SIGNING_SECRET_KEYRING_FULLPATH')) {
                ext."signing.secretKeyRingFile" = SIGNING_SECRET_KEYRING_FULLPATH
            }
            else {
                ext."signing.secretKeyRingFile" = System.properties['user.home'] + "/.gnupg/secring.gpg"
            }
        }
    }
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

// TODO: refine it so that it works correctly
//task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
//    classifier = 'javadoc'
//    from androidJavadocs.destinationDir
//}


task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

artifacts {
    archives androidSourcesJar
    //archives androidJavadocsJar
}

signing {
    sign configurations.archives
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
            }

            // Defined at gradle.properties for Olympus project -we might need to move those to be scoped for the library alone
            pom.groupId = "org.restcomm"
            pom.artifactId = "restcomm-android-qos-sdk-qoslib"
            //pom.version = "1.0.0-beta-4.1"
            pom.version = "1.0.3-alpha-1"  // -SNAPSHOT"

            // remember that releases first go to the staging area
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
            }

            pom.project {
                name 'Restcomm Android QoS Library'
                packaging 'aar'
                // optionally artifactId can be defined here
                description 'Main QoS Library. Consists of APIs and coverage monitoring service sending data to an online QoS server'
                url 'https://github.com/RestComm/android-QoS'

                scm {
                    connection 'scm:git:https://github.com/RestComm/android-QoS'
                    developerConnection 'scm:git:https://github.com/RestComm/android-QoS'
                    url 'https://github.com/RestComm/android-QoS'
                }

                licenses {
                    license {
                        name 'GNU Affero General Public License, Version 3.0'
                        url 'https://www.gnu.org/licenses/agpl-3.0.en.html'
                    }
                }

                developers {
                    developer {
                        id 'bscheurman'
                        name 'Brad Scheurman'
                        email 'bscheurman@mymobilecoverage.com'
                    }
                }

                contributors {
                    contributor {
                        name 'Antonis Tsakiridis'
                    }
                }

            }
        }
    }
}